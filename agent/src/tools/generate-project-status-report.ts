import { Tool, tool } from '@voltagent/core';
import { z } from 'zod';
import * as matter from 'gray-matter';
import * as yaml from 'js-yaml';

// Define the types for our project management data
interface Issue {
  number: number;
  title: string;
  state: 'open' | 'closed';
  assignees: string[];
  labels: string[];
  milestone: number;
  [key: string]: any;
}

interface Milestone {
  number: number;
  title: string;
  description: string;
  state: 'open' | 'closed';
  [key: string]: any;
}

export const generateProjectStatusReport = new Tool({
  id: 'generate-project-status-report',
  name: 'Generate Project Status Report',
  description: 'Generates a human-readable markdown file summarizing the status of all issues and milestones.',
  parameters: z.object({
    outputFilePath: z.string().default('operations/project-status.md'),
  }),
  run: async ({ parameters }) => {
    // 1. Load all data
    const milestones = (await tool('parse-yaml', {
      filePath: 'operations/milestones.yml',
    })) as Milestone[];
    const issueFiles = (await tool('list-files', { directory: 'operations/issues' })) as string[];
    const issues: Issue[] = [];
    for (const fileName of issueFiles) {
      const fileContent = (await tool('read-file', {
        filePath: `operations/issues/${fileName}`,
      })) as string;
      const { data } = matter(fileContent);
      issues.push(data as Issue);
    }

    // 2. Generate the markdown content
    let reportContent = '# DIH Project Status Report\n\n';
    reportContent += 'This report is automatically generated by the Executive Director agent. It summarizes the current state of all project milestones and their associated issues.\n\n---\n\n';

    for (const milestone of milestones.sort((a, b) => a.number - b.number)) {
      const milestoneIssues = issues.filter((issue) => issue.milestone === milestone.number).sort((a, b) => a.number - b.number);
      const closedIssues = milestoneIssues.filter((issue) => issue.state === 'closed').length;
      const totalIssues = milestoneIssues.length;
      const progress = totalIssues > 0 ? Math.round((closedIssues / totalIssues) * 100) : 100;

      reportContent += `## Milestone ${milestone.number}: ${milestone.title}\n\n`;
      reportContent += `**Status:** ${milestone.state} | **Progress:** ${progress}%\n\n`;
      reportContent += `> ${milestone.description}\n\n`;

      if (totalIssues > 0) {
        reportContent += '| ID | Title | Status | Assignees | Labels |\n';
        reportContent += '|:---|:------|:-------|:----------|:-------|\n';
        for (const issue of milestoneIssues) {
          reportContent += `| [Issue #${issue.number}](./issues/${issue.number}.md) | ${issue.title} | ${issue.state} | ${
            issue.assignees?.join(', ') || ''
          } | ${issue.labels?.join(', ') || ''} |\n`;
        }
      } else {
        reportContent += '_No issues are currently assigned to this milestone._\n';
      }
      reportContent += '\n---\n\n';
    }

    // 3. Write the report to a file
    await tool('write-file', {
      filePath: parameters.outputFilePath,
      content: reportContent,
    });

    return `Successfully generated project status report at ${parameters.outputFilePath}.`;
  },
});
